(function(){"use strict";let E;function W(){return new Promise((n,r)=>{const o=indexedDB.open("racelog");o.onupgradeneeded=i=>{i.target.result.createObjectStore("racedays",{keyPath:"id",autoIncrement:!1}).createIndex("date","date",{unique:!1})},o.onsuccess=i=>{E=i.target.result,n(E)}})}function _(n="readonly"){return E.transaction(["racedays"],n)}function I(n,r="readonly"){return n=n||_(r),n.objectStore("racedays")}function b(n){return new Promise((r,o)=>{const i=I().get(n);i.onsuccess=c=>{r(c.target.result)}})}function w(n,r){return new Promise((o,i)=>{const c=I().openCursor(n);c.onsuccess=a=>{const l=a.target.result;if(!l){o();return}if(r(l.value)){o();return}l.continue()}})}const g=W(),p=5,S=52,j=50,N=5,T=1,A=20,C=10;function M(n){return n.toLowerCase().replace(/[_-]/g," ")}function k(n){return Math.round((n+Number.EPSILON)*1e3)/1e3}function R(n,r){const c=(n-r)/6048e5;return Math.trunc(c)}onmessage=async function(n){await g;const r=n.data,o=IDBKeyRange.bound(r,r+S,!1,!0),i=(await b(r)||{date:void 0}).date;if(!i){postMessage({});return}const c={},a=(e,t,s,d)=>{const y=M(e);let u=c[y];u||(c[y]=u={player:e,pickWins:[0,0,0,0,0],pickTotal:[0,0,0,0,0],activity:0,sleeperActivity:0}),++u.pickTotal[d],s&&++u.pickWins[d],R(i,t)<=N&&(++u.activity,d>2&&++u.sleeperActivity)},l=(e,t)=>{a(e.captain,e.date,t,0),a(e.pick1,e.date,t,1),a(e.pick2,e.date,t,2),a(e.pick3,e.date,t,3),a(e.pick4,e.date,t,4)};await w(o,e=>{e.races.forEach(t=>{const s=t.shift();!s||(l(s,!0),t.forEach(d=>{l(d,!1)}))})}),Object.values(c).forEach(e=>{e.total=e.pickTotal.reduce((t,s)=>t+s),e.wins=e.pickWins.reduce((t,s)=>t+s),e.winrate=k(e.wins/e.total),e.pickWinrate=e.pickWins.map((t,s)=>k(t/(e.pickTotal[s]||1))),e.sleeperTotal=e.pickTotal[3]+e.pickTotal[4],e.sleeperWins=e.pickWins[3]+e.pickWins[4],e.sleeperWinrate=e.sleeperWins/(e.sleeperTotal||1)});const f=Object.values(c).filter(e=>e.total>=j).filter(e=>e.activity>=T),v=f.sort((e,t)=>t.wins-e.wins).slice(0,p),L=f.sort((e,t)=>t.winrate-e.winrate).slice(0,p),P=f.filter(e=>e.pickTotal[0]>=C).sort((e,t)=>t.pickWinrate[0]-e.pickWinrate[0]).slice(0,p),h=Object.values(c).filter(e=>e.sleeperTotal>=A).filter(e=>e.sleeperActivity>=T).sort((e,t)=>t.sleeperWinrate-e.sleeperWinrate).slice(0,p);postMessage({id:r,topWins:v,topWinrates:L,topCaptains:P,topSleepers:h})}})();
